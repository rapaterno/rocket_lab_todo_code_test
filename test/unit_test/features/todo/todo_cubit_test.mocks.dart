// Mocks generated by Mockito 5.3.2 from annotations
// in rocket_lab_todo_code_test/test/unit_test/features/todo/todo_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rocket_lab_todo_code_test/data/model/todo/todo.dart' as _i2;
import 'package:rocket_lab_todo_code_test/data/repository/abstract_todo_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodo_0 extends _i1.SmartFake implements _i2.Todo {
  _FakeTodo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AbstractTodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractTodoRepository extends _i1.Mock
    implements _i3.AbstractTodoRepository {
  MockAbstractTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Todo> createTodo({
    required String? name,
    required _i2.TodoPriority? priority,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [],
          {
            #name: name,
            #priority: priority,
          },
        ),
        returnValue: _i4.Future<_i2.Todo>.value(_FakeTodo_0(
          this,
          Invocation.method(
            #createTodo,
            [],
            {
              #name: name,
              #priority: priority,
            },
          ),
        )),
      ) as _i4.Future<_i2.Todo>);
  @override
  _i4.Future<List<_i2.Todo>> getTodos(_i3.SortBy? sortBy) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [sortBy],
        ),
        returnValue: _i4.Future<List<_i2.Todo>>.value(<_i2.Todo>[]),
      ) as _i4.Future<List<_i2.Todo>>);
  @override
  _i4.Future<void> updateTodo({
    required String? id,
    _i2.TodoPriority? priority,
    String? name,
    bool? isCompleted,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [],
          {
            #id: id,
            #priority: priority,
            #name: name,
            #isCompleted: isCompleted,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteTodo({required dynamic id}) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
